=
        BYTE_ORDER vax_swf
=

MAIN:
	CHAR[3] signature
	BODY_{signature} body
:

DATA_SECTION:
	HEXDATA[] data
:

BODY_FWS:
	UI8 version // ( 0x04 for SWF 4)
	UI32 file_length
	EVAL DATA_END = file_length + 5
	RECT frame_size
	UF16 frame_rate
	UI16 frame_count
	TAGGED_BLOCK[] tagblock
	DATA_SECTION data_section
:

RECT:
	UB[5] nbits
	SB[nbits] xmin
	SB[nbits] xmax
	SB[nbits] ymin
	SB[nbits] ymax
	SKIPBITS[]
:

TAGID=
	0x00 END
	0x02 DEFINESHAPE
	0x09 SETBACKGROUNDCOLOR
	0x0c DOACTION
	0x0e DEFINESOUND
	0x27 DEFINESPRITE
	0x2d SOUNDSTREAMHEAD2
	0x1a PLACEOBJECT2
	0x01 SHOWFRAME
	0x1c REMOVEOBJECT2
	0x22 DEFINEBUTTON2
	0x2b FRAMELABEL
	0x38 EXPORT
=

TAG_DATA_SOUNDSTREAMHEAD2:
	UB[4] reserved
	UB[2] playback_rate
	UB[1] playback_size
	UB[1] playback_stereo
	UB[4] compression
	UB[2] sound_rate
	UB[1] sound_size
	UB[1] sound_stereo
	UI16 sample_size
	UI16[compression == 2] latency_seek
:

EXTERNAL_SYMBOL:
	UI16 id
	CSTRING symbol_name
:

TAG_DATA_EXPORT:
	UI16 count
	EXTERNAL_SYMBOL[count] symbol
:

SOUND_FORMAT=
	0 RAW
	1 ADPCM
	2 MP3
	3 UNCOMPRESSED
	6 NELLYMOSER
=

TAG_DATA_DEFINESOUND:
	UI16 sound_id
	UB[4] <SOUND_FORMAT> sound_format
	UB[2] sound_rate
	UB[1] sound_is_16bits
	EVAL sample_size = sound_is_16bits ? 2 : 1
	UB[1] sound_is_stereo
	UI32 sample_count
	HEXDATA[] sound_data
:

TAG_DATA_SETBACKGROUNDCOLOR:
	RGB color
:

SHAPE_STYLES:
	FILL_STYLES fill_styles
:

FILL_STYLES:
	UI8 count
	FILL_STYLE[count] styles
:

FILL_STYLE_TYPE=
	0x00 SOLID
	0x10 GRADIENT
	0x12 RADIAL
	0x40 TILED
	0x41 CLIPPED
=

GRADIENT_RECORD:
	UI8 value
	RGB color
:

GRADIENT:
	UI8 count
	GRADIENT_RECORD[count] gradient_records
:

MATRIX:
	UB[1] has_scale
	UB[has_scale && 5] nscale_bits
	UB[has_scale && nscale_bits] scale_x
	UB[has_scale && nscale_bits] scale_y
	UB[1] has_rotate
	UB[has_rotate && 5] rotate_bits
	UB[has_rotate && rotate_bits] rotate_skew_0
	UB[has_rotate && rotate_bits] rotate_skew_1
	UB[5] translate_bits
	UB[translate_bits] translate_x
	UB[translate_bits] translate_y
	SKIPBITS[]
:

FILL_STYLE:
	UI8 <FILL_STYLE_TYPE> type
	RGB[type == 0x00] color
	MATRIX[type & 0x10 && 1] gradient_matrix
	GRADIENT[type & 0x10 && 1] gradient
	UI16[type & 0x40 && 1] bitmap_id
	MATRIX[type & 0x40 && 1] bitmap_matrix
:

SHAPE_RECORD_TYPE=
	0 SETUP
	1 EDGE
=
	

SHAPE_RECORD:
	UB[1] <SHAPE_RECORD_TYPE> type
	SHAPE_RECORD_DATA_{type} data
:

SHAPE_RECORD_DATA_SETUP:
	UB[5] type = (has_new_styles && 0x10) | (has_line_style && 0x8) | (has_fill_style1 && 0x4) | (has_fill_style0 && 0x2) | (has_move_to && 0x1)
	EVAL ARRAY_LAST = type == 0 and "SHAPE_RECORD"
	EVAL has_new_styles = type & 0x10 && 1
	EVAL has_line_style = type & 0x8 && 1
	EVAL has_fill_style1 = type & 0x4 && 1
	EVAL has_fill_style0 = type & 0x2 && 1
	EVAL has_move_to = type & 0x1 && 1

	UB[has_move_to && 5] shape_move_size
	SB[shape_move_size] move_x
	SB[shape_move_size] move_y

	UB[has_fill_style0 && fill_bits_count] fill_style0
	UB[has_fill_style1 && fill_bits_count] fill_style1
	UB[has_line_style && line_bits_count] line_style
	SHAPE_STYLES[has_new_styles] styles
:

SHAPE_RECORD_EDGE_TYPE=
	0 CURVE
	1 EDGE
=

SHAPE_RECORD_DATA_EDGE:
	UB[1] <SHAPE_RECORD_EDGE_TYPE> edge_type
	SHAPE_RECORD_DATA_EDGE_POINTS_{edge_type} points
:

SHAPE_RECORD_DATA_EDGE_POINTS_EDGE:
	UB[4] coord_size
	EVAL coord_real_size = coord_size + 2
	UB[1] line_has_x_and_y
	SB[line_has_x_and_y && coord_real_size] control_delta_x
	SB[line_has_x_and_y && coord_real_size] control_delta_y
	UB[!line_has_x_and_y] line_has_x_or_y
	SB[line_has_x_or_y && coord_real_size] anchor_delta_x
	SB[!line_has_x_and_y && !line_has_x_or_y && coord_real_size] anchor_delta_y
:

SHAPE_RECORD_DATA_EDGE_POINTS_CURVE:
	UB[4] coord_size
	EVAL coord_real_size = coord_size + 2
	SB[coord_real_size] control_delta_x
	SB[coord_real_size] control_delta_y
	SB[coord_real_size] anchor_delta_x
	SB[coord_real_size] anchor_delta_y
:


LINE_STYLES:
	UI8 count
	LINE_STYLE[count] line_styles
:

LINE_STYLE:
	UI16 width
	RGB color
:

SHAPE_WITH_STYLE:
	FILL_STYLES fill_styles
	LINE_STYLES line_styles
	UB[4]	fill_bits_count
	UB[4]	line_bits_count
	SHAPE_RECORD[] shape_records
	SKIPBITS[]
:

TAG_DATA_DEFINESHAPE:
	UI16	ShapeID
	RECT   ShapeBounds
	SHAPE_WITH_STYLE shapes_with_style
:

TAG_DATA_SHOWFRAME:
:

TAG_DATA_*:
	HEXDATA[] data
:

PUSH_DATA_STRING:
	CSTRING string
:

PUSH_DATA_FLOAT:
	UI32 float
:

PUSH_DATA_NULL:
:

PUSH_DATA_UNDEF:
:

PUSH_DATA_REGISTER:
	register
:

PUSH_DATA_BOOL:
	UI8 value
:

PUSH_DATA_INTEGER:
	UI32 value
:

PUSH_DATA_DOUBLE:
#	UI32 n1
#	UI32 n2
	F64 value
:

PUSH_DATA_REFERENCE:
	UI8 reference
:

PUSH_DATA_REFERENCE2:
	UI16 reference
:

PUSH_DATA_TYPE=
	0x00 STRING
	0x01 FLOAT
	0x02 NULL
	0x03 UNDEF
	0x04 REGISTER
	0x05 BOOLEAN
	0x06 DOUBLE
	0x07 INTEGER
	0x08 REFERENCE
	0x09 REFERENCE2
=

ACTION_TYPE=
	0 END
	0x17 POP
	0x1c GET_VARIABLE
	0x1d SET_VARIABLE
	0x04 NEXT_FRAME
	0x05 PREV_FRAME
	0x06 PLAY
	0x07 STOP
	0x08 TOGGLE_QUALITY
	0x09 STOP_SOUNDS
	0x0a ADD
	0x0b SUBTRACT
	0x0c MULTIPLY
	0x0d DIVIDE
	0x0e EQUAL
	0x0f LESS_THAN
	0x10 LOGICAL_AND
	0x11 LOGICAL_OR
	0x12 LOGICAL_NOT
	0x13 STRING_EQUAL
	0x14 STRING_LENGTH
	0x15 SUB_STRING
	0x23 SET_PROPERTY
	0x3c SET_LOCAL_VARIABLE
	0x3d CALL_FUNCTION
	0x43 DECLARE_TARGET
	0x45 GET_TARGET
	0x46 ENUMERATE
	0x47 ADD_TYPED
	0x48 LESS_THAN_TYPED
	0x49 EQUAL_TYPED
	0x4a TO_NUMBER
	0x4b TO_STRING
	0x4c DUPLICATE
	0x81 GOTO_FRAME
	0x83 GET_URL
	0x88 DECLARE_DICTIONARY
	0x8a WAIT_FRAME
	0x8b SET_TARGET
	0x8c GOTO_LABEL
	0x9b DECLARE_FUNCTION
	0x96 PUSH_DATA
	0x9d BRANCH_IF_TRUE
=

UNKNOWN:
:

PUSH_DATA_*:
	UNKNOWN unknown
:

PUSH_DATA_BOOLEAN:
	UI8 bool
:

PUSH_DATA:
	UI8 <PUSH_DATA_TYPE> type
	PUSH_DATA_{type} data
:

ACTION_PUSH_DATA:
	UI16 length
	EVAL DATA_END = length
	PUSH_DATA[] data
:

ACTION_BRANCH_IF_TRUE:
	UI16 length
	UI16 offset
:

ACTION_CALL_FUNCTION:
:

ACTION_END:
	EVAL ARRAY_LAST = ACTIONRECORD
:

ACTION_NEXT_FRAME:
:

ACTION_PREV_FRAME:
:

ACTION_STOP:
:

ACTION_PLAY:
:

ACTION_STOP_SOUNDS:
:

ACTION_TOGGLE_QUALITY:
:


ACTION_STOP_SOUNDS:
:

ACTION_TOGGLE_QUALITY:
:

ACTION_GOTO_LABEL:
	UI16 length
	CSTRING label
:

ACTION_GOTO_FRAME:
	UI16 length
	UI16 frame
:

ACTION_WAIT_FOR_FRAME:
	UI16 length
	UI16 frame
	UI8 skip_count
:

ACTION_SET_TARGET:
	UI16 length
	CSTRING name
:

ACTION_GET_URL:
	UI16 length
	CSTRING url
	CSTRING target
:

ACTION_DECLARE_DICTIONARY:
	UI16 length
	UI16 count
	CSTRING[count] dictionary
:

ACTION_DECLARE_FUNCTION:
	UI16 length
	CSTRING name
	UI16 arg_count
	CSTRING[arg_count] arg_name
	UI16 function_length
	EVAL DATA_END = function_length
	ACTIONRECORD[] action_records
:

ACTION_*:
	UI16 length
	HEXDATA[length] data
:

ACTIONRECORD:
	#UI8 action_number
	#EVAL <ACTION_TYPE> action_type = action_number
	#EVAL long_action = action_number & 0x80 && 1
	UI8 <ACTION_TYPE> action_type
	EVAL long_action = action_type & 0x80 && 1
	ACTION_{action_type}[long_action] action
:

TAG_DATA_DOACTION:
	ACTIONRECORD[300] action_records
:

BUTTON_TYPE=
	0 END
=

CXFORM:
	UB[1] has_add
	UB[1] has_mult
	UB[4] nbits
	UB[has_mult && nbits] red_mult_value
	UB[has_mult && nbits] green_mult_value
	UB[has_mult && nbits] blue_mult_value
	UB[has_add && nbits] red_add_value
	UB[has_add && nbits] green_add_value
	UB[has_add && nbits] blue_add_value
	SKIPBITS[]
:

BUTTONRECORD2:
	UB[4] reserved
	UB[1] state_hit_test
	UB[1] state_down
	UB[1] state_over
	UB[1] state_up
	EVAL BREAK = ! reserved && ! state_hit_test &&  ! state_down && ! state_over && ! state_up
	#EVAL ARRAY_LAST = BUTTONRECORD2
	UI16 character
	UI16 layer
	MATRIX matrix
	CXFORM cxform
:

TAG_DATA_DEFINEBUTTON2:
	UI16 button_id
	UI8 flags
	UI16 offset
	BUTTONRECORD2[] button_records
	ACTIONCONDITIONS[offset && 1] action_conditions
:

ACTIONCONDITIONS:
	ACTIONCONDITION[] condition
:

ACTIONCONDITION:
	UI16 next_action_offset
	UI16 condition
	ACTIONRECORD[] actions
	EVAL ARRAY_LAST = ! next_action_offset
:

TAG_DATA_PLACEOBJECT2:
	UB[2] reserved
	UB[1] has_name
	UB[1] has_ratio
	UB[1] has_color_transform
	UB[1] has_matrix
	UB[1] has_character
	UB[1] move
	UI16 depth
	UI16[has_character] character_id
	MATRIX[has_matrix] matrix
	CXFORM[has_color_transform] cxform
	UI16[has_ratio] ratio
	CSTRING[has_name] name 
:

TAG_DATA_FRAMELABEL:
	CSTRING label
:

TAG_DATA_END:
	EVAL ARRAY_LAST = TAGGED_BLOCK
:

TAGGED_BLOCK:
	UI16 _tag_id_len = tag_id << 6 | short_len
	EVAL <TAGID> tag_id = _tag_id_len >> 6
	EVAL short_len = _tag_id_len & 0x3f
	EVAL _have_long_len = int(short_len == 0x3f)
	UI32[_have_long_len] long_len
	EVAL DATA_END = _have_long_len and long_len or short_len
	TAG_DATA_{tag_id} data
:

RGB:
	UI8 R
	UI8 G
	UI8 B
:

RGBA:
	UI8 R
	UI8 G
	UI8 B
	UI8 A
:

